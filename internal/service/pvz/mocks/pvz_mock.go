// Code generated by MockGen. DO NOT EDIT.
// Source: pvz.go
//
// Generated by this command:
//
//	mockgen -source=pvz.go -destination=mocks/pvz_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "avito-pvz/internal/entity"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockPVZService is a mock of PVZService interface.
type MockPVZService struct {
	ctrl     *gomock.Controller
	recorder *MockPVZServiceMockRecorder
	isgomock struct{}
}

// MockPVZServiceMockRecorder is the mock recorder for MockPVZService.
type MockPVZServiceMockRecorder struct {
	mock *MockPVZService
}

// NewMockPVZService creates a new mock instance.
func NewMockPVZService(ctrl *gomock.Controller) *MockPVZService {
	mock := &MockPVZService{ctrl: ctrl}
	mock.recorder = &MockPVZServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZService) EXPECT() *MockPVZServiceMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockPVZService) CreatePVZ(ctx context.Context, pvz *entity.PVZ) (*entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, pvz)
	ret0, _ := ret[0].(*entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZServiceMockRecorder) CreatePVZ(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZService)(nil).CreatePVZ), ctx, pvz)
}

// GetAllWithReceptions mocks base method.
func (m *MockPVZService) GetAllWithReceptions(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithReceptions", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithReceptions indicates an expected call of GetAllWithReceptions.
func (mr *MockPVZServiceMockRecorder) GetAllWithReceptions(ctx, startDate, endDate, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithReceptions", reflect.TypeOf((*MockPVZService)(nil).GetAllWithReceptions), ctx, startDate, endDate, page, limit)
}
