// Code generated by MockGen. DO NOT EDIT.
// Source: pvz.go
//
// Generated by this command:
//
//	mockgen -source=pvz.go -destination=mocks/pvz_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "avito-pvz/internal/entity"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockRepository) CreatePVZ(ctx context.Context, pvz *entity.PVZ) (*entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", ctx, pvz)
	ret0, _ := ret[0].(*entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockRepositoryMockRecorder) CreatePVZ(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockRepository)(nil).CreatePVZ), ctx, pvz)
}

// GetCityIdByName mocks base method.
func (m *MockRepository) GetCityIdByName(ctx context.Context, city *entity.City) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityIdByName", ctx, city)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityIdByName indicates an expected call of GetCityIdByName.
func (mr *MockRepositoryMockRecorder) GetCityIdByName(ctx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityIdByName", reflect.TypeOf((*MockRepository)(nil).GetCityIdByName), ctx, city)
}

// GetPVZsWithFilters mocks base method.
func (m *MockRepository) GetPVZsWithFilters(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPVZsWithFilters", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPVZsWithFilters indicates an expected call of GetPVZsWithFilters.
func (mr *MockRepositoryMockRecorder) GetPVZsWithFilters(ctx, startDate, endDate, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPVZsWithFilters", reflect.TypeOf((*MockRepository)(nil).GetPVZsWithFilters), ctx, startDate, endDate, page, limit)
}

// GetPvzById mocks base method.
func (m *MockRepository) GetPvzById(ctx context.Context, uuid string) (*entity.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvzById", ctx, uuid)
	ret0, _ := ret[0].(*entity.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvzById indicates an expected call of GetPvzById.
func (mr *MockRepositoryMockRecorder) GetPvzById(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvzById", reflect.TypeOf((*MockRepository)(nil).GetPvzById), ctx, uuid)
}
